<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.MusicMapper">

    <insert id="insert" useGeneratedKeys="true" keyProperty="musicId" keyColumn="music_id">
        insert into music (music_name, music_url, image_url, from_singer, lyrics_url, timelength, activation, create_time, listen_numb)
        values(#{musicName}, #{musicUrl}, #{imageUrl}, #{fromSinger}, #{lyricsUrl}, #{timelength}, 1, #{createTime}, 0)
    </insert>

    <delete id="deleteById">
        delete from music where music_id = #{id}
    </delete>

    <update id="updateById">
        update music
        <set>
            <if test="musicName != null">music_name = #{musicName},</if>
            <if test="musicUrl != null">music_url = #{musicUrl},</if>
            <if test="imageUrl != null">image_url = #{imageUrl},</if>
            <if test="fromSinger != null">from_singer = #{fromSinger},</if>
            <if test="lyricsUrl!= null">lyrics_url = #{lyricsUrl},</if>
            <if test="timelength != null">timelength = #{timelength},</if>
            <if test="activation != null">activation = #{activation},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="listenNumb != null">listen_numb = #{listenNumb}</if>
        </set>
        where music_id = #{musicId}
    </update>

    <select id="selectAll" resultType="com.example.entity.Music">
        SELECT m.*, u.username AS singerName
        FROM music m
        LEFT JOIN user u ON m.from_singer = u.id
        <where>
            <if test="musicName != null">
                m.music_name LIKE CONCAT('%', #{musicName}, '%')
            </if>
            <if test="singerName != null">
                OR u.username LIKE CONCAT('%',#{singerName},'%')
            </if>
        </where>
        ORDER BY m.music_id ASC
    </select>

    <insert id="insertMusicTags">
        INSERT INTO music_tag (music_id, tag_id)
        VALUES
        <foreach collection="tagIds" item="tagId" separator=",">
            (#{musicId}, #{tagId})
        </foreach>
    </insert>

    <delete id="deleteMusicTags">
        DELETE FROM music_tag WHERE music_id = #{musicId}
    </delete>

    <delete id="deleteTagsByMusicId">
        delete from music_tag where music_id = #{musicId}
    </delete>

    <insert id="insertMusicTag">
        insert into music_tag (music_id, tag_id) values (#{musicId}, #{tagId})
    </insert>

    <update id="freezeById">
        update music set activation = 0 where music_id = #{id}
    </update>
    <update id="unfreezeById">
        update music set activation = 1 where music_id = #{id}
    </update>
    <select id="selectByKeywordExcludingIds" resultType="com.example.entity.Music">
        select music.* , user.username as singerName from music left join user on user.id = music.from_singer
        <where>
            <choose>
                <when test="keyword != null and keyword.trim() != ''">
                    (music.music_name LIKE CONCAT('%', #{keyword}, '%')
                    OR user.username LIKE CONCAT('%', #{keyword}, '%'))
                </when>
                <otherwise>
                    1=1
                </otherwise>
            </choose>
        AND music.activation = 1
            <if test="existingIds != null and existingIds.size() > 0">
                AND music_id NOT IN
                <foreach collection="existingIds" item="id" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>
</mapper> 